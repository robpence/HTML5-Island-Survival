'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sourceMap = require('source-map');

var _webpackSources = require('webpack-sources');

var _ModuleFilenameHelpers = require('webpack/lib/ModuleFilenameHelpers');

var _ModuleFilenameHelpers2 = _interopRequireDefault(_ModuleFilenameHelpers);

var _emoji = require('./emoji');

var emoji = _interopRequireWildcard(_emoji);

var _uglifyEs = require('uglify-es');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmojifyPlugin = function () {
  function EmojifyPlugin(options) {
    _classCallCheck(this, EmojifyPlugin);

    if (typeof options !== 'object' || Array.isArray(options)) {
      this.options = {};
    } else {
      this.options = options || {};
    }

    this.options.test = this.options.test || /\.js($|\?)/i;
  }

  _createClass(EmojifyPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('compilation', function (compilation) {

        compilation.plugin('optimize-chunk-assets', function (chunks, callback) {
          var assets = new WeakSet();

          chunks.reduce(function (acc, chunk) {
            return acc.concat(chunk.files || []);
          }, []).concat(compilation.additionalChunkAssets || []).filter(_ModuleFilenameHelpers2.default.matchObject.bind(null, _this.options)).forEach(function (file) {
            var asset = compilation.assets[file];
            if (assets.has(asset)) {
              return;
            }

            var source = asset.source();

            source = emoji.pack(source, emoji.generateEmoji());
            var unpacker = (0, _uglifyEs.minify)(emoji.unpack.toString(), { mangle: true }).code;
            var generator = (0, _uglifyEs.minify)(emoji.generateEmoji.toString(), { mangle: true }).code;

            source = `eval((${unpacker})(\n"${source}",\n(${generator})()))`;

            // Updating assets
            assets.add(compilation.assets[file] = new _webpackSources.RawSource(source));
          });
          callback();
        });
      });
    }
  }]);

  return EmojifyPlugin;
}();

exports.default = EmojifyPlugin;